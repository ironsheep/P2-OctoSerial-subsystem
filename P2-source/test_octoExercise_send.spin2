'' =================================================================================================
''
''   File....... test_octoExercise_send.spin2
''   Purpose.... exercise robustly the new 8-port serial transceiver routines
''               this is the SEND end of the exerciser
''   Authors.... Stephen M Moraco
''               -- Copyright (c) 2022 Iron Sheep Productions, LLC
''               -- see below for terms of use
''   E-mail..... stephen@ironsheep.biz
''   Started.... Dec 2022
''   Updated.... 1 Dec 2022
''
'' =================================================================================================

CON { timing }

  CLK_FREQ = 300_000_000                                        ' system freq as a constant
'  MS_001   = CLK_FREQ / 1_000                                   ' ticks in 1ms
'  US_001   = CLK_FREQ / 1_000_000                               ' ticks in 1us

  BAUD_PST  = 115_200                                            ' terminal baud rate
  BAUD_OCTO_PORTS  = 115_200                                    ' our serial ports baud rate

  _clkfreq = CLK_FREQ                                           ' set system clock

CON { fixed io pins }

  RX1      = 63  { I }                                          ' programming / debug
  TX1      = 62  { O }

  SF_CS    = 61  { O }                                          ' serial flash
  SF_SCK   = 60  { O }
  SF_SDO   = 59  { O }
  SF_SDI   = 58  { I }

OBJ
        serPorts  : "isp_octoport_serial_wLA"               ' 8-port driver
        serQue    : "isp_string_queue"                  ' Rx Message Que
        strFmt    : "isp_mem_strings"                  ' in-memory formatted strings
        utils     : "test_utils"                  ' common routines for both ends of test mech

CON

#10, SST_UNKNOWN, SST_NEEDTX, SST_NEEDRX

VAR

  LONG  portHndl[utils.MAX_PORTS]                                             ' named ports for testing

  byte  txBuffer[utils.CHAR_BUFFER_SIZE + 1]
  byte  rxBuffer[utils.CHAR_BUFFER_SIZE + 1]
  byte  valBuffer[utils.CHAR_BUFFER_SIZE + 1]

  LONG  txState[utils.MAX_PORTS]  ' assign only SST_* values
  LONG  msgTxCount[utils.MAX_PORTS]
  LONG  msgRxCount[utils.MAX_PORTS]
  LONG  passCt[utils.MAX_PORTS]
  LONG  failCt[utils.MAX_PORTS]

PUB main()| portIndex, portHandle, pNextString, bDidPass, bValidStatus, passIncr, failIncr

    longfill(@txState, SST_NEEDTX, utils.MAX_PORTS)    ' preset "need a tx message"
    longfill(@portHndl, serPorts.PORT_NOT_FOUND, utils.MAX_PORTS)    ' empty handles
    longfill(@msgTxCount, 0, utils.MAX_PORTS * 4)    ' preload w/zero's

    debug("* -----  TRANSMIT end STARTED  ----- *")

    ' testing setup only (rxp, txp, ....)
    portHndl[0] := serPorts.addPort(16, 17, serPorts.MODE_NONE, BAUD_OCTO_PORTS, serPorts.PU_3K3)                       ' 1st open port

'{
    portHndl[1] := serPorts.addPort(18, 19, serPorts.MODE_NONE, BAUD_OCTO_PORTS, serPorts.PU_3K3)                       ' 2nd open port

    ' orange, yellow pair
    portHndl[2] := serPorts.addPort(20, 21, serPorts.MODE_NONE, BAUD_OCTO_PORTS, serPorts.PU_15K)                       ' 3rd open port

    portHndl[3] := serPorts.addPort(22, 23, serPorts.MODE_NONE, BAUD_OCTO_PORTS, serPorts.PU_15K)                       ' 4th open port

    ' green, blue pair
    portHndl[4] := serPorts.addPort(24, 25, serPorts.MODE_NONE, BAUD_OCTO_PORTS, serPorts.PU_15K)                       ' 5th open port

    portHndl[5] := serPorts.addPort(26, 27, serPorts.MODE_NONE, BAUD_OCTO_PORTS, serPorts.PU_15K)                       ' 6th open port

    ' red, brown pair
    portHndl[6] := serPorts.addPort(28, 29, serPorts.MODE_NONE, BAUD_OCTO_PORTS, serPorts.PU_15K)                       ' 7th open port

    portHndl[7] := serPorts.addPort(30, 31, serPorts.MODE_NONE, BAUD_OCTO_PORTS, serPorts.PU_15K)                       ' 9th open port
'}
    debug("* Handles: ", sdec_long_array_(@portHndl, utils.MAX_PORTS))

    serPorts.start()

    ' test each port once then quit!
    '  (we are checking hte wiring!)

    repeat portIndex from 0 to utils.MAX_PORTS - 1
        if portHndl[portIndex] <> serPorts.PORT_NOT_FOUND
            if txState[portIndex] == SST_NEEDTX
                msgTxCount[portIndex]++
                utils.getMessageForCount(@valBuffer, portIndex, msgTxCount[portIndex], utils.MSG_RAW)
                serPorts.txStr(portHndl[portIndex], @valBuffer)
                txState[portIndex] := SST_NEEDRX
                debug("Tx #", udec_(portIndex + 1), " msg=[", zstr(@valBuffer), "]")

            if txState[portIndex] == SST_NEEDRX
                repeat
                    portHandle, pNextString := serPorts.nextRxString(@rxBuffer,utils.CHAR_BUFFER_SIZE)
                    if portHandle <> portHndl[portIndex]
                        ' validate message
                        msgRxCount[portIndex]++
                        bValidStatus, passIncr, failincr :=  utils.validateAckedString(portIndex, msgRxCount[portIndex], pNextString)
                        debug("Rx #", udec_(portIndex + 1), " msg=[", zstr(pNextString), "] cts [good=(", udec_(passCt[portIndex]), "), bad=(", udec_(failCt[portIndex]), ")]")
                        ' mark port as needing a TX
                        txState[portIndex] := SST_NEEDTX
                        quit    ' we received one, go send more


    repeat    ' hold here forever....

PRI indexFromHandle(portHandle) : nPortIndex | hndlIdx
' convert a port handle to the index into the list of portHandles
  repeat hndlIdx from 0 to utils.MAX_PORTS - 1
    if portHndl[hndlIdx] == portHandle
        nPortIndex := hndlIdx
        quit  ' we have our answer, outta here!



{{

 -------------------------------------------------------------------------------------------------
  MIT License

  Copyright (c) 2022 Iron Sheep Productions, LLC

  Permission is hereby granted, free of charge, to any person obtaining a copy
  of this software and associated documentation files (the "Software"), to deal
  in the Software without restriction, including without limitation the rights
  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
  copies of the Software, and to permit persons to whom the Software is
  furnished to do so, subject to the following conditions:

  The above copyright notice and this permission notice shall be included in all
  copies or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
  SOFTWARE.
 =================================================================================================
}}
